// 7_01_迷宫地图.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include <windows.h>

int g_map[40][40] = {
	{ 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1},
	{ 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,1, 0,0, 1,0, 0,0, 0,0, 0,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 2,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,1, 0,0, 1,0, 0,0, 0,0, 0,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,1, 0,0, 1,0, 0,0, 0,0, 0,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,1, 0,0, 1,0, 0,0, 0,0, 0,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,0, 1,1, 1,1, 0,0, 0,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 0,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 0,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,1, 1,1, 1,1, 1,1, 1,0, 1,1, 1,1, 1,1, 1,1, 1,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 0,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 1,0, 0,1, 1,1, 0,0, 0,0, 0,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 1,0, 0,1, 0,1, 0,0, 0,0, 0,0, 0,1 },
	{ 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 1,0, 0,1, 0,1, 0,0, 0,0, 0,0, 0,1 },
	{ 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 1,0, 0,1, 0,1, 0,0, 0,0, 0,0, 0,1 },
	{ 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 1,0, 0,1, 0,1, 0,0, 0,0, 0,0, 0,1 },
	{ 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,1, 0,0, 0,0, 0,0, 0,1 },
	{ 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,1, 0,0, 0,0, 0,0, 0,1 },
	{ 1,0, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,0, 0,0, 0,0, 0,1 },
	{ 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,1, 0,0, 0,0, 0,0, 0,1 },
	{ 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,1, 0,0, 0,0, 0,0, 0,1 },
	{ 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,1, 0,0, 0,0, 0,0, 0,3 },
	{ 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1 }

};

void WriteChar(short row,short col,char * str)
{
	COORD pos = { 2*col,row };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
	printf("%s",str);
}

void DrawMap(int (*pMap)[40])
{
	for (size_t i = 0; i < 40; i++)
	{
		for (size_t j = 0; j < 40; j++)
		{
			if (pMap[i][j] == 0)
			{
				WriteChar(i,j," ");
			}else if(pMap[i][j]==1){
				WriteChar(i, j, "■");
			}else if (pMap[i][j] == 2) {
				WriteChar(i, j, "♀");
			}else if (pMap[i][j] == 3) {
				WriteChar(i, j, "♂");
			}

		}
	}
}

void SaveMap(int(*pMap)[40])
{
	/*
	1.打开文件
	2.读写文件
	3.关闭文件
	*/
	//1.打开文件
	FILE * pFile;
	errno_t err = fopen_s(&pFile,"g_map.map","w");
	if (err != 0)
	{
		printf("打开文件出错\n");
	}
	//2.读写文件
	size_t size = fwrite(pMap,sizeof(int)*40, 40, pFile);
	if (size!=40)
	{
		printf("地图写入失败\n");
		fclose(pFile);
	}
	//3.关闭文件
	fclose(pFile);
}

void ReadMap(int(*pMap)[40])
{
	/*
	1.打开文件
	2.读写文件
	3.关闭文件
	*/
	//1.打开文件
	FILE * pFile;
	errno_t err = fopen_s(&pFile, "g_map.map", "r");
	if (err != 0)
	{
		printf("打开文件出错\n");
	}
	//2.读写文件
	size_t size = fread(pMap, sizeof(int) * 40, 40, pFile);
	if (size != 40)
	{
		printf("地图读入失败\n");
		fclose(pFile);
	}
	//3.关闭文件
	fclose(pFile);
}
int main()
{
	
	//1.定义地图数据(二维数组)
	//2.打印地图
	//DrawMap(g_map);

	//SaveMap(g_map);
	int map[40][40];
	ReadMap(map);
	DrawMap(map);

    return 0;
}

