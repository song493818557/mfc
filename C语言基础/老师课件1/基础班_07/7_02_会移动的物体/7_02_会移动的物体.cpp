// 7_02_会移动的物体.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include <windows.h>
#include <conio.h>
#include <winuser.rh>

typedef struct _OBJECT
{
	COORD oldPos;  //旧位置
	COORD newPos;  //新位置
	char icon[3];  //图片样式
}OBJECT,*POBJECT;

int g_map[40][40] = {
	{ 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1 },
	{ 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,1, 0,0, 1,0, 0,0, 0,0, 0,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 2,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,1, 0,0, 1,0, 0,0, 0,0, 0,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,1, 0,0, 1,0, 0,0, 0,0, 0,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,1, 0,0, 1,0, 0,0, 0,0, 0,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,0, 1,1, 1,1, 0,0, 0,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 0,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 0,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,1, 1,1, 1,1, 1,1, 1,0, 1,1, 1,1, 1,1, 1,1, 1,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 1,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 1,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 1,0, 0,1, 0,0, 0,0, 0,0, 0,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 1,0, 0,1, 1,1, 0,0, 0,0, 0,0, 0,1 },
	{ 1,0, 0,1, 0,0, 1,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 1,0, 0,1, 0,1, 0,0, 0,0, 0,0, 0,1 },
	{ 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 1,0, 0,1, 0,1, 0,0, 0,0, 0,0, 0,1 },
	{ 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 1,0, 0,1, 0,1, 0,0, 0,0, 0,0, 0,1 },
	{ 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 1,0, 0,1, 0,1, 0,0, 0,0, 0,0, 0,1 },
	{ 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,1, 0,0, 0,0, 0,0, 0,1 },
	{ 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,1, 0,0, 0,0, 0,0, 0,1 },
	{ 1,0, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,0, 0,0, 0,0, 0,1 },
	{ 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,1, 0,0, 0,0, 0,0, 0,1 },
	{ 1,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,1, 0,0, 0,0, 0,0, 0,1 },
	{ 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 1,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,1, 0,0, 0,0, 0,0, 0,3 },
	{ 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1, 1,1 }

};
OBJECT g_obj = { {0,3},{ 0,3 },"♀" };

void WriteChar(short row, short col, char * str)
{
	COORD pos = { 2 * col,row };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
	printf("%s", str);
}

void DrawMap(int(*pMap)[40])
{
	for (size_t i = 0; i < 40; i++)
	{
		for (size_t j = 0; j < 40; j++)
		{
			if (pMap[i][j] == 0)
			{
				WriteChar(i, j, " ");
			}
			else if (pMap[i][j] == 1) {
				WriteChar(i, j, "■");
			}
			else if (pMap[i][j] == 2) {
				WriteChar(i, j, "♀");
				// g_obj.oldPos = { j,i };
				// g_obj.newPos = { j,i };
			}
			else if (pMap[i][j] == 3) {
				WriteChar(i, j, "♂");
			}

		}
	}
}

int GetMessage()
{
	if (_kbhit())
	{
		return _getch();
	}
	return 0;
}
bool Check(COORD pos)
{
	if (g_map[pos.Y][pos.X] == 0 )
	{
		return true;
	}
	return false;
}
void MoveObj(int key)
{
	switch (key)
	{
	case 'w':case 'W':
		g_obj.newPos.Y--;
		break;
	case 's':case 'S':
		g_obj.newPos.Y++;
		break;
	case 'a':case 'A':
		g_obj.newPos.X--;
		break;
	case 'd':case 'D':
		g_obj.newPos.X++;
		break;
	case VK_SPACE: //case ' ':
		break;
	default:
		break;
	}

	bool isOK = Check(g_obj.newPos); //检查是否能移动
	if (isOK)
	{
		//擦除旧的
		WriteChar(g_obj.oldPos.Y, g_obj.oldPos.X, "  ");
		g_obj.oldPos = g_obj.newPos;
		//画出新的
		WriteChar(g_obj.newPos.Y, g_obj.newPos.X, g_obj.icon);
	}else{
		g_obj.newPos = g_obj.oldPos;
	}
	
}
int main()
{
	//打印地图
	DrawMap(g_map);
	while (true)
	{
		//1.接收用户按键
		int ch = GetMessage();
		if (ch==0)
		{
			continue;
		}
		//2.移动物体
		MoveObj(ch);

	}
    return 0;
}

