// 基础_04.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"


int _tmain(int argc, _TCHAR* argv[])
{
	//1循环：while  do-while  for
	//while (表达式)//表达式为真，就会执行花括号内的语句
	//{

	//}
	//do
	//{

	//} while (表达式);//循环体在判断条件之前，
	//                 //故而最少执行一次循环体

	//for (表达式1; < 表达式2; 表达式3)
	//{

	//}
	////先表达式1，只执行1次
	////表达式2，循环体，表达式3构成一个循环。
	////当表达式2的值为假的时候，就跳出循环。
	//break和continue的作用：
	//break跳出这个循环，执行循环结构之后的语句
	//continue，跳出本次循环，直接开始下一轮循环。
	//2 二维数组
	int Array1[3][4] = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	int Array2[3][4] = { { 1, 2, 3 }, 
	{ 4, 5, 6 }, { 7, 8, 9 } };
	//注意：字符二维数组初始化（类比着一维数组来学习）
	char Array3[10][20] = { 
		"xiaoming", 
		"xiaohong", 
		"xiaolan" 
	};
	//3 函数
	//设计一个函数的时候，应该先明确函数的功能，根据功能
	//确定函数需要的参数，明确函数如何将得到的结果进行反馈
	//反馈的方式包括：返回值，显示，写文件，网络传输，
	//函数一般的定义方式：
	//返回值 函数名（形式参数列表）
	{
		//函数的实现部分
	}
	//调用函数的方式
	//函数名(实际参数列表);
	//注意：
	//函数调用语句，又叫函数表达式，也有值，就是其返回值。
	//4 全局变量和局部变量
	//4.1局部变量从内存角度来说，是存储于栈区，随着函数的调用
	//与退出，栈区是自动的增长或者减小的，故而局部变量仅对
	//当前函数有效。
	//从语法角度来说，局部变量仅在其所在的{}内有效
	//这就是局部变量的作用域
	//4.2全局变量存在于静态（全局）数据区，它是在程序运行
	//过程中一直存在的，不会增多也不会减少，有很大作用域
	//前提条件
	//从语法角度来说，全局变量在其定义位置，直至文件结尾
	//所有的函数，都可以访问。
	//还有一种变量也存储在静态数据区，就是被static修饰的
	//局部变量，它的生存期特别长
	//但是从语法上来说，其作用域仅在函数内有效。
	//注意区分一下：作用域和生存期。
	//
	//extern修饰全局变量，表示去其他文件中寻找这个变量
	//static修饰全局变量，表示这个变量仅在本文件使用。

	return 0;
}

